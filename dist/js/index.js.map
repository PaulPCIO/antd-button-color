{"version":3,"sources":["../../lib/index.tsx"],"names":["customTypeArray","customWithArray","styleButton","dashed","borderStyle","ghost","link","boxShadow","borderColor","disableAnimation","Button","props","_isLink","with","_isDashed","_isGhost","_type","type","_ghost","_style","undefined","_linkStyle","_classes","className","filter","x","join","style"],"mappings":";;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;AAGA,IAAMA,eAAe,GAAG,CACpB,SADoB,EAEpB,SAFoB,EAGpB,MAHoB,EAIpB,MAJoB,EAKpB,WALoB,EAMpB,QANoB,CAAxB;AAQA,IAAMC,eAAe,GAAG,CACpB,MADoB,EAEpB,QAFoB,EAGpB,OAHoB,CAAxB;AAgBA,IAAMC,WAAW,GAAG;AAChBC,EAAAA,MAAM,EAAE;AACJC,IAAAA,WAAW,EAAE;AADT,GADQ;AAIhBC,EAAAA,KAAK,EAAE;AACHD,IAAAA,WAAW,EAAE;AADV,GAJS;AAOhBE,EAAAA,IAAI,EAAE;AACFF,IAAAA,WAAW,EAAE,MADX;AAEFG,IAAAA,SAAS,EAAE,MAFT;AAGFC,IAAAA,WAAW,EAAE;AAHX;AAPU,CAApB;AAcA,IAAMC,gBAAwB,GAAG,mBAAjC;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAoB;AAC/B,MAAMC,OAAO,GAAGD,KAAK,CAACE,IAAN,KAAe,MAA/B;;AACA,MAAMC,SAAS,GAAGH,KAAK,CAACE,IAAN,KAAe,QAAjC;;AACA,MAAME,QAAQ,GAAGJ,KAAK,CAACE,IAAN,KAAe,OAAhC;;AACA,MAAMG,KAAU,GAAGL,KAAK,CAACM,IAAzB;;AACA,MAAMC,MAAe,GAAGJ,SAAS,IAAIC,QAAb,IAAyBH,OAAzB,IAAoCD,KAAK,CAACN,KAA1C,GAAiD,IAAjD,GAAwD,KAAhF;;AACA,MAAMc,MAAM,GAAGR,KAAK,CAACE,IAAN,GAAaX,WAAW,CAACS,KAAK,CAACE,IAAP,CAAxB,GAAuCO,SAAtD;;AACA,MAAMC,UAAU,GAAGT,OAAO,GAAGH,gBAAH,GAAsBW,SAAhD;;AACA,MAAME,QAAQ,GAAG,CAACD,UAAD,EAAaV,KAAK,CAACY,SAAnB,EAA8BC,MAA9B,CAAqC,UAAAC,CAAC;AAAA,WAAI,CAAC,CAACA,CAAN;AAAA,GAAtC,EAA+CC,IAA/C,CAAoD,GAApD,CAAjB;;AACA,sBACI,oBAAC,eAAD,eAAoBf,KAApB;AAA2B,IAAA,SAAS,EAAEW,QAAtC;AAAgD,IAAA,KAAK,oBAAMH,MAAN,MAAiBR,KAAK,CAACgB,KAAvB,CAArD;AAAoF,IAAA,KAAK,EAAET,MAA3F;AAAmG,IAAA,IAAI,EAAEF;AAAzG,KADJ;AAGH,CAZD;;eAceN,M","sourcesContent":["import * as React from \"react\";\r\nimport ButtonOriginal, { ButtonProps, ButtonType } from \"antd/lib/button/button\";\r\n\r\ntype Mod<T, R> = Omit<T, keyof R> & R;\r\nconst customTypeArray = [\r\n    \"success\", \r\n    \"warning\", \r\n    \"info\", \r\n    \"dark\", \r\n    \"lightdark\", \r\n    \"danger\"\r\n] as const; \r\nconst customWithArray = [\r\n    \"link\", \r\n    \"dashed\", \r\n    \"ghost\"\r\n] as const; \r\ntype typeProps = typeof customTypeArray[number];\r\ntype withProps = typeof customWithArray[number];\r\ntype ModButtonProps = Mod<ButtonProps, {\r\n    type?: ButtonType | typeProps\r\n}>;\r\n\r\ntype TButton = ModButtonProps & {\r\n    with?: withProps;\r\n    style?: React.CSSProperties;\r\n}\r\n\r\nconst styleButton = {\r\n    dashed: {\r\n        borderStyle: \"dashed\"\r\n    },\r\n    ghost: {\r\n        borderStyle: \"solid\"\r\n    },\r\n    link: {\r\n        borderStyle: \"none\",\r\n        boxShadow: \"none\",\r\n        borderColor: \"transparent\"\r\n    }\r\n}\r\n\r\nconst disableAnimation: string = \"disable-animation\";\r\n\r\nconst Button = (props: TButton) => {\r\n    const _isLink = props.with === 'link';\r\n    const _isDashed = props.with === 'dashed';\r\n    const _isGhost = props.with === 'ghost';\r\n    const _type: any = props.type;\r\n    const _ghost: boolean = _isDashed || _isGhost || _isLink || props.ghost? true : false;\r\n    const _style = props.with ? styleButton[props.with] : undefined;\r\n    const _linkStyle = _isLink ? disableAnimation : undefined;\r\n    const _classes = [_linkStyle, props.className].filter(x => !!x).join(' ');\r\n    return (\r\n        <ButtonOriginal {...props} className={_classes} style={{..._style, ...props.style}} ghost={_ghost} type={_type}/>\r\n    )\r\n};\r\n\r\nexport default Button;"],"file":"index.js"}